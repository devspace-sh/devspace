// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: remote.proto

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], "/remote.Tunnel/InitTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelInitTunnelClient{stream}
	return x, nil
}

type Tunnel_InitTunnelClient interface {
	Send(*SocketDataRequest) error
	Recv() (*SocketDataResponse, error)
	grpc.ClientStream
}

type tunnelInitTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelInitTunnelClient) Send(m *SocketDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelInitTunnelClient) Recv() (*SocketDataResponse, error) {
	m := new(SocketDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Tunnel/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	InitTunnel(Tunnel_InitTunnelServer) error
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) InitTunnel(Tunnel_InitTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method InitTunnel not implemented")
}
func (UnimplementedTunnelServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_InitTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).InitTunnel(&tunnelInitTunnelServer{stream})
}

type Tunnel_InitTunnelServer interface {
	Send(*SocketDataResponse) error
	Recv() (*SocketDataRequest, error)
	grpc.ServerStream
}

type tunnelInitTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelInitTunnelServer) Send(m *SocketDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelInitTunnelServer) Recv() (*SocketDataRequest, error) {
	m := new(SocketDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tunnel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Tunnel/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Tunnel_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitTunnel",
			Handler:       _Tunnel_InitTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}

// DownstreamClient is the client API for Downstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownstreamClient interface {
	Download(ctx context.Context, opts ...grpc.CallOption) (Downstream_DownloadClient, error)
	Changes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Downstream_ChangesClient, error)
	ChangesCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeAmount, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type downstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewDownstreamClient(cc grpc.ClientConnInterface) DownstreamClient {
	return &downstreamClient{cc}
}

func (c *downstreamClient) Download(ctx context.Context, opts ...grpc.CallOption) (Downstream_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Downstream_ServiceDesc.Streams[0], "/remote.Downstream/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &downstreamDownloadClient{stream}
	return x, nil
}

type Downstream_DownloadClient interface {
	Send(*Paths) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type downstreamDownloadClient struct {
	grpc.ClientStream
}

func (x *downstreamDownloadClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *downstreamDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *downstreamClient) Changes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Downstream_ChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Downstream_ServiceDesc.Streams[1], "/remote.Downstream/Changes", opts...)
	if err != nil {
		return nil, err
	}
	x := &downstreamChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Downstream_ChangesClient interface {
	Recv() (*ChangeChunk, error)
	grpc.ClientStream
}

type downstreamChangesClient struct {
	grpc.ClientStream
}

func (x *downstreamChangesClient) Recv() (*ChangeChunk, error) {
	m := new(ChangeChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *downstreamClient) ChangesCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeAmount, error) {
	out := new(ChangeAmount)
	err := c.cc.Invoke(ctx, "/remote.Downstream/ChangesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downstreamClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Downstream/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownstreamServer is the server API for Downstream service.
// All implementations must embed UnimplementedDownstreamServer
// for forward compatibility
type DownstreamServer interface {
	Download(Downstream_DownloadServer) error
	Changes(*Empty, Downstream_ChangesServer) error
	ChangesCount(context.Context, *Empty) (*ChangeAmount, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedDownstreamServer()
}

// UnimplementedDownstreamServer must be embedded to have forward compatible implementations.
type UnimplementedDownstreamServer struct {
}

func (UnimplementedDownstreamServer) Download(Downstream_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownstreamServer) Changes(*Empty, Downstream_ChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method Changes not implemented")
}
func (UnimplementedDownstreamServer) ChangesCount(context.Context, *Empty) (*ChangeAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangesCount not implemented")
}
func (UnimplementedDownstreamServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDownstreamServer) mustEmbedUnimplementedDownstreamServer() {}

// UnsafeDownstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownstreamServer will
// result in compilation errors.
type UnsafeDownstreamServer interface {
	mustEmbedUnimplementedDownstreamServer()
}

func RegisterDownstreamServer(s grpc.ServiceRegistrar, srv DownstreamServer) {
	s.RegisterService(&Downstream_ServiceDesc, srv)
}

func _Downstream_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DownstreamServer).Download(&downstreamDownloadServer{stream})
}

type Downstream_DownloadServer interface {
	Send(*Chunk) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type downstreamDownloadServer struct {
	grpc.ServerStream
}

func (x *downstreamDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *downstreamDownloadServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Downstream_Changes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownstreamServer).Changes(m, &downstreamChangesServer{stream})
}

type Downstream_ChangesServer interface {
	Send(*ChangeChunk) error
	grpc.ServerStream
}

type downstreamChangesServer struct {
	grpc.ServerStream
}

func (x *downstreamChangesServer) Send(m *ChangeChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Downstream_ChangesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownstreamServer).ChangesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Downstream/ChangesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownstreamServer).ChangesCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downstream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownstreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Downstream/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownstreamServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Downstream_ServiceDesc is the grpc.ServiceDesc for Downstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Downstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Downstream",
	HandlerType: (*DownstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangesCount",
			Handler:    _Downstream_ChangesCount_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Downstream_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Downstream_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Changes",
			Handler:       _Downstream_Changes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remote.proto",
}

// UpstreamClient is the client API for Upstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamClient interface {
	Checksums(ctx context.Context, in *TouchPaths, opts ...grpc.CallOption) (*PathsChecksum, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error)
	RestartContainer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, opts ...grpc.CallOption) (Upstream_RemoveClient, error)
	Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type upstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamClient(cc grpc.ClientConnInterface) UpstreamClient {
	return &upstreamClient{cc}
}

func (c *upstreamClient) Checksums(ctx context.Context, in *TouchPaths, opts ...grpc.CallOption) (*PathsChecksum, error) {
	out := new(PathsChecksum)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Checksums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Upstream_ServiceDesc.Streams[0], "/remote.Upstream/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamUploadClient{stream}
	return x, nil
}

type Upstream_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type upstreamUploadClient struct {
	grpc.ClientStream
}

func (x *upstreamUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamClient) RestartContainer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/RestartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Remove(ctx context.Context, opts ...grpc.CallOption) (Upstream_RemoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Upstream_ServiceDesc.Streams[1], "/remote.Upstream/Remove", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamRemoveClient{stream}
	return x, nil
}

type Upstream_RemoveClient interface {
	Send(*Paths) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type upstreamRemoveClient struct {
	grpc.ClientStream
}

func (x *upstreamRemoveClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamRemoveClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamClient) Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamServer is the server API for Upstream service.
// All implementations must embed UnimplementedUpstreamServer
// for forward compatibility
type UpstreamServer interface {
	Checksums(context.Context, *TouchPaths) (*PathsChecksum, error)
	Upload(Upstream_UploadServer) error
	RestartContainer(context.Context, *Empty) (*Empty, error)
	Remove(Upstream_RemoveServer) error
	Execute(context.Context, *Command) (*Empty, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedUpstreamServer()
}

// UnimplementedUpstreamServer must be embedded to have forward compatible implementations.
type UnimplementedUpstreamServer struct {
}

func (UnimplementedUpstreamServer) Checksums(context.Context, *TouchPaths) (*PathsChecksum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checksums not implemented")
}
func (UnimplementedUpstreamServer) Upload(Upstream_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUpstreamServer) RestartContainer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (UnimplementedUpstreamServer) Remove(Upstream_RemoveServer) error {
	return status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedUpstreamServer) Execute(context.Context, *Command) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedUpstreamServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUpstreamServer) mustEmbedUnimplementedUpstreamServer() {}

// UnsafeUpstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamServer will
// result in compilation errors.
type UnsafeUpstreamServer interface {
	mustEmbedUnimplementedUpstreamServer()
}

func RegisterUpstreamServer(s grpc.ServiceRegistrar, srv UpstreamServer) {
	s.RegisterService(&Upstream_ServiceDesc, srv)
}

func _Upstream_Checksums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouchPaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Checksums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Checksums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Checksums(ctx, req.(*TouchPaths))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamServer).Upload(&upstreamUploadServer{stream})
}

type Upstream_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type upstreamUploadServer struct {
	grpc.ServerStream
}

func (x *upstreamUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upstream_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/RestartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).RestartContainer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamServer).Remove(&upstreamRemoveServer{stream})
}

type Upstream_RemoveServer interface {
	SendAndClose(*Empty) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type upstreamRemoveServer struct {
	grpc.ServerStream
}

func (x *upstreamRemoveServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamRemoveServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upstream_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Execute(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Upstream_ServiceDesc is the grpc.ServiceDesc for Upstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Upstream",
	HandlerType: (*UpstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checksums",
			Handler:    _Upstream_Checksums_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _Upstream_RestartContainer_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Upstream_Execute_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Upstream_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Upstream_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _Upstream_Remove_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}
